{"version":3,"sources":["components/collapsibleCard.js","components/tabView.js","components/chartControls.js","components/textplot.js","components/chart.js","components/textOutput.js","components/configIO.js","components/moduleSelection.js","components/channelCtrl.js","components/element.js","components/plots.js","components/slider.js","components/moduleConfiguration.js","components/io.js","components/gridworld.js","components/experimentView.js","components/experimentViewStore.js","components/dashboard2.js","components/conditionSelection.js","components/modelVisualisation.js","components/webblocks.js","reducers.js","index.js","store.js","img/twg.svg","img/tw.svg","img/tg.svg"],"names":["CollapsibleCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToogleClick","expanded","state","setState","expandedByDefault","_this$props","title","children","react_default","a","createElement","className","concat","onClick","md","PureComponent","TabView","handleGroupToggle","groupName","openedGroup","group","_this2","groups","React","Children","toArray","map","key","name","classNames","_is-active","style","display","ChartControls","collapsibleCard_CollapsibleCard","tabView_TabView","Text","data","overflow","JSON","stringify","displayName","Chart","svg","fixed_x","xRange","yRange","absPos","pos","x","y","rel","dragging","channels","c","textplot_Text","plottype","Line","LineSeries","LineSeriesCanvas","mark","es","customComponent","stroke","fill","color","Bar","VerticalBarSeries","VerticalBarSeriesCanvas","colorType","tileIDs","_this3","options","tile","value","chartControls_ChartControls","id","onInput","e","tileChanged","target","type","colorChanged","togglePauseChannel","paused","removeChannel","document","getElementById","yRangeMin","yRangeMax","height","width","min","max","barPresent","numTicks","textChannels","forEach","length","Math","push","plotChannels","filter","dontCheckIfEmpty","xType","xDomain","yDomain","margin","left","right","createChannels","bottom","top","tickTotal","createTextChannels","createChartCtrl","defaultProps","channel","console","log","ConfigLoader","_PureComponent","handleChange","bind","assertThisInitialized","inherits","createClass","files","reader","FileReader","onload","file","result","newLayout","parse","layoutLoaded","readAsText","onChange","accept","ConfigSaver","_PureComponent2","onSave","layoutstring","layout","blob","Blob","url","URL","createObjectURL","downloadAnchorNode","setAttribute","click","ModuleSelection","context","selectedID","moduleList","m","selected","src","img","alt","addModule","Component","ChannelCtrl","newChannel","addSimpleChannel","probeConnection","createChannelSettings","createSingleChannelSettings","activateChannel","connection","channelId","Number","split","tileId","updateChannel","addNewChannel","defaultValue","changePlottype","advancedChannels","tiles","probeMessage","configIO_ConfigLoader","configIO_ConfigSaver","headerChanged","header","moduleSelection_ModuleSelection","modules","Element","assign","classnames","createLineSeries","channelState","stepNr","sourceProps","dataKeys","val","el","i","strokeDasharray","strokes","LinePlot","lines","vlines","tickValues","LinePlotStore","connect","ownProps","sources","config","channelData","createBarSeries","bardata","prototype","toString","BarPlot","apply","arguments","_this$props2","bars","BarPlotStore","CustomSlider","handleChangeSlider","onSliderChange","react_rangeslider_lib_default","labels","0","50","100","l","CustomSliderStore","source","maxV","Infinity","dispatch","v","SourceBlock","sourceInformation","curVals","allowRemoval","elements","oldVal","_loop","dataKeyObj","listIdx","updateValues","checked","removeDataSource","disabled","ModuleConfiguration","dataConfig","moduleInformation","dataSrc","moduleConfig","idCounter","handleClickOutside","addEventListener","removeEventListener","event","containerDiv","contains","closeConfig","key1","undefined","key2","key3","newState","objectSpread","newConfig","attribKey","modifyPart","newID","dataSrcInformation","sourceBlocks","moduleConfiguration_SourceBlock","keys","ref","node","createDataSrcInputs","allowMultipleSources","addDataSource","createModule","SocketConnection","store","updateData","sendMessage","addConnection","removeConnection","_updateStore","socket","io","transport","on","addFunction","payload","message","emit","msg","channelConfig","dataKey","shouldLog","updateAction","connectionInfo","newChannels","cleanAction","SocketConnectionStore","CanvasGridworld","updateCanvas","prevProps","prevState","snapshot","canvas","refs","bgname","getContext","canvasMaxWidth","canvasMaxHeight","tileSize","floor","clearRect","renderTile","showTrueTarget","showBeliefSymbols","goalPos","targets","goalBeliefs","beliefs","goal","worldBelief","world","showVisibles","showBeliefedVision","visibles","fillStyle","fillRect","row","arr","j","symbol","beliefSymbol","desire","tileContent","showTargets","showTrueColor","hideTile","posX","posY","font","fillText","strokeStyle","beginPath","centerX","centerY","arc","PI","eyeSize","traj","moveTo","lineTo","renderMap","showPath","renderPath","renderAgent","fgname","ExperimentView","showSeenColor","visiblesUpdated","onChangeShowTargets","onChangeShowTrueColor","onChangeShowTrueTarget","onChangeShowBeliefSymbols","onChangeShowPath","onChangeShowVisibles","onChangeShowBeliefedVision","onChangeShowSeenColor","requestVisibles","conditionName","gridworld","defaultChecked","nextProps","ExperimentViewStore","selection","condition","runNr","methods","twg","agentPositions","slice","sampling","sampleList","mapIDToConfig","1","2","4","5","mapTypeToComponent","Slider","Dashboard","tileIDCounter","w","h","colWidth","rowHeight","connectionMap","createTile","onLayoutChange","moduleId","newTiles","newTile","dataSources","parseInt","indexOf","removedTile","t","idx","splice","blocks","sID","Module","components_element","data-grid","removeTile","createDataSourceControl","window","innerWidth","cols","fn","channelCtrl_ChannelCtrl","selectPlottype","moduleConfiguration_ModuleConfiguration","react_grid_layout_default","draggableHandle","Condition","optionChanged","option","count","align","onSelect","ConditionSelection","dict","sort","b","localeCompare","numeric","conditionSelection_Condition","conditions","create_list","ModelVis","curModel","classesSelected","classes","tw","tg","initialState","baseReducer","action","createReducer","asyncReducers","combineReducers","createStore","configureStore","getState","ReactDOM","render","react_redux_es","dashboard2_Dashboard","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2423a087.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { MdKeyboardArrowDown as DownIcon } from 'react-icons/md'\nimport { MdKeyboardArrowUp as UpIcon } from 'react-icons/md'\n\n\nexport default class CollapsibleCard extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            expanded: props.expandedByDefault\n        }\n    }\n    \n    handleToogleClick = () => {\n        const { expanded } = this.state;\n        this.setState( {expanded: !expanded});\n    \n    }\n    \n    render() {\n        const { title, children } = this.props;\n        const { expanded } = this.state;\n    \n        return (\n            <div className={`card ${expanded ? '_is-expanded' : ''}`}>\n                <div className=\"card__header no-select\" onClick={this.handleToogleClick}>\n                    <h3>\n                        {title}\n                    </h3>\n                    {expanded ? <UpIcon /> : <DownIcon />}\n                </div>\n                {expanded &&\n                    <div className=\"card_body\">\n                        {children}\n                    </div>}\n            \n            </div>\n        \n        )\n    }\n\n}\n\nCollapsibleCard.propTypes = {\n    expandedByDefault: PropTypes.bool.isRequired\n}","import React, { PureComponent } from 'react';\n\nimport classNames from 'classnames';\n\nexport default class TabView extends PureComponent {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            openedGroup: props.group || 'Base',\n        }\n    }\n    \n    \n    handleGroupToggle = groupName => {\n        this.setState({ openedGroup: groupName })\n    }\n\n    render() {\n    \n        const { children } = this.props;\n        const { openedGroup } = this.state;\n        \n        let groups = React.Children.toArray(children)\n        return (\n            <div className=\"tabs_container\">\n                <div className=\"tabs__menu\">\n                    {groups.map(group => {\n                        if (!group) {return null}\n                        return (\n                            <div\n                                key={group.props.name}\n                                className={classNames('no-select tabs__menu__item', {\n                                    '_is-active': openedGroup === group.props.name,\n                                })}\n                                onClick={() => {\n                                    this.handleGroupToggle(group.props.name)\n                                }}\n                            >\n                                {group.props.name}\n                            </div>\n                        )\n                    })}\n                </div>\n                {groups.map(group => {\n                    if (!group) {return null}\n                    return (\n                        <div\n                            key={group.props.name}\n                            style={{\n                                display: openedGroup === group.props.name ? 'block' : 'none',\n                            }}\n                        >\n                            {group.props.children}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n\n}","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CollapsibleCard from './collapsibleCard';\n\nimport TabView from \"./tabView\";\n\n\n\nexport default class ChartControls extends PureComponent {\n\n    render() {\n    \n        const { children: groups, title, group } = this.props;\n        \n        \n        return (\n            <CollapsibleCard title={title} expandedByDefault={false}>\n                <TabView group={group}>\n                    {groups}\n                </TabView>\n            </CollapsibleCard>\n        )\n    }\n    \n}\n\n\nChartControls.propTypes = {\n    group: PropTypes.string\n}","import React, { PureComponent } from 'react';\n\n\nexport default class Text extends PureComponent {\n\n    render() {\n        \n        const { data } = this.props;\n        \n        var style = {overflow: \"auto\"};\n        return (\n                <div style={style}>\n                    <pre>\n                        {JSON.stringify(data)}\n                    </pre>\n                </div>\n               )\n    }\n    \n}\n\nText.displayName = 'Text';","import React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\nimport {FlexibleWidthXYPlot, XAxis, YAxis, Borders,\n        LineSeries, LineSeriesCanvas, \n        VerticalBarSeries, VerticalBarSeriesCanvas, \n        CustomSVGSeries} from \"react-vis\"; // ./3rdParty/\n\n\nimport ChartControls from \"./chartControls\";\nimport Text from \"./textplot\";\n\nimport classNames from 'classnames';\n\nexport default class Chart extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n                    svg: true,\n                    fixed_x: false,\n                    xRange: null,\n                    yRange: null,\n                    absPos: false,\n                    pos: {x:0, y:0},\n                    rel: null,\n                    dragging: false\n                    };\n                    \n        // this.onWheel = this.onWheel.bind(this);\n        \n        // this.togglePos = this.togglePos.bind(this);\n        \n        // this.onMouseDown = this.onMouseDown.bind(this);\n        // this.onMouseUp = this.onMouseUp.bind(this);\n        // this.onMouseMove = this.onMouseMove.bind(this);\n    }\n    \n    \n    // componentDidMount() {\n    //     var pos = ReactDOM.findDOMNode(this).getBoundingClientRect();\n    //     this.setState({pos: {x: pos.left, y: pos.top}})\n    // }\n    \n    \n    // calculate relative position to the mouse and set dragging=true\n    // onMouseDown(e) {\n    //     // only left mouse button\n    //     if (e.button !== 0) return\n    //     var pos = ReactDOM.findDOMNode(this).getBoundingClientRect()\n    //     this.setState({\n    //       dragging: true,\n    //       rel: {\n    //         x: e.pageX - (pos.left + window.scrollX),\n    //         y: e.pageY - (pos.top + window.scrollY)\n    //       }\n    //     })\n    //     e.stopPropagation()\n    //     e.preventDefault()\n    // }\n    \n    \n    // onMouseUp(e) {\n    //     this.setState({dragging: false})\n    //     e.stopPropagation()\n    //     e.preventDefault()\n    // }\n    \n    \n    // onMouseMove(e) {\n    //     if (!this.state.dragging) return\n    //     this.setState({\n    //       pos: {\n    //         x: e.pageX - this.state.rel.x,\n    //         y: e.pageY - this.state.rel.y\n    //       }\n    //     })\n    //     e.stopPropagation()\n    //     e.preventDefault()\n    // }\n    \n    // togglePos(e) {\n    //     this.setState({\n    //         absPos: !this.state.absPos\n    //     })\n    // }\n/*\n    componentWillReceiveProps(nextProps){\n        console.log(\"new chart props: \", this.props == nextProps);\n    }\n  */\n    \n    createTextChannels(channels) {\n        return channels.map( (c) => {\n            //Create copy in order to trigger rendere when data changes!\n            //let tmpData =c.data.slice();\n            return <Text data={c.data} />\n        \n        });\n    \n    }\n    \n    createChannels(channels) {\n        \n        return channels.map( (c) => {\n            \n            /*            \n            return <Series  key={c.id}\n                            plottype={c.plottype} \n                            data={c.data}\n                            color={c.color}\n                            mark={c.mark}\n                            svg={this.state.svg}\n                />\n            */\n            \n            switch (c.plottype) {\n            \n                case \"line\":\n                    let Line = this.state.svg ? LineSeries : LineSeriesCanvas;\n                    return [c.mark ? <CustomSVGSeries customComponent={c.mark} data={c.data} style={{stroke: 'red', fill: 'orange'}} /> : null,\n                                <Line data={c.data} stroke={c.color} />\n                            ]\n                case \"bar\":\n                    let Bar = this.state.svg ? VerticalBarSeries : VerticalBarSeriesCanvas;\n                    return <Bar data={c.data} color={c.color} colorType=\"literal\"/>\n                default:\n                    return \"Invalid plottype\";\n            }\n            \n            \n          \n        });\n    \n    }\n\n    \n    createChartCtrl(channels, tileIDs) {\n        let options = tileIDs.map( (tile) => {\n                                    return <option value={tile}>{tile}</option>\n                                });\n        options = options.concat(<option value=\"new\">New</option>);\n    \n    /*\n        let markOptions = [\"star\", \"square\", \"circle\", \"diamond\", \"none\"].map( \n                            (option) => {\n                                 return <option value={option}>{option}</option>   \n                            });\n                   */         \n                            \n        return (\n            <ChartControls title={\"Chart settings\"} group={\"Series\"}>\n                  <div name={\"Series\"}>\n                      {channels.map( (c) => {\n                          return ([\n                          <div>\n                              <div> Channel: {c.id} </div>\n                             <div> Plottype: {c.plottype} </div> \n                             <div> Display in panel: <select  \n                                                value={c.tile}\n                                                onInput={ (e) => {\n                                                    this.props.tileChanged(c.id, e.target);\n                                                    }\n                                                }\n                                          >\n                                            {options}\n                                         </select>\n                             </div>\n                             <div> Color:  <input type=\"color\" id=\"color\" \n                                            value={c.color} \n                                            onInput={ (e) => {\n                                                this.props.colorChanged(c.id, e.target);\n                                                }\n                                            } />\n                            </div>\n                            <button onClick={ () => {this.props.togglePauseChannel(c) } } >\n                               {c.paused ? \"Resume Channel\" : \"Pause Channel\"}\n                             </button>                            \n                             <button onClick={ () => {this.props.removeChannel(c.id) } } >\n                                Remove Channel\n                             </button>\n                         </div> \n                         ])})\n                      }\n                  </div>\n                  <div name={\"Display\"} >\n                      <button onClick={() => this.setState({svg: !this.state.svg})} >\n                            { this.state.svg ? \"Render on Canvas\" : \"Render as svg\"}\n                      </button>\n                      <div> Show only last: <input type=\"text\" id=\"xRange\" />\n                          <button onClick={() => {\n                              let xRange = document.getElementById(\"xRange\").value;\n                              \n                              if (xRange === \"0\") {\n                                  this.setState({xRange: null})\n                              } else {\n                                  this.setState({xRange: xRange})\n                              }\n                          }}>\n                            {\"Update\"}\n                      </button>\n                      </div>\n                      <div> Y Range min: \n                          <input type=\"text\" id=\"yRangeMin\"/>\n                          max: <input type=\"text\" id=\"yRangeMax\"/>\n                          <button onClick={() => {\n                              let yRangeMin = document.getElementById(\"yRangeMin\").value;\n                              let yRangeMax = document.getElementById(\"yRangeMax\").value;\n                              \n                              if (yRangeMin === \"\") {\n                                  yRangeMin = null;\n                              }\n                              if (yRangeMax === \"\") {\n                                  yRangeMax = null;\n                              }\n                              let yRange = null;\n                              if (yRangeMin !== null || yRangeMax !== null) {\n                                  yRange = [yRangeMin, yRangeMax];\n                              }\n                              \n                              this.setState({yRange:yRange})\n                      \n                          }}>\n                            {\"Update\"}\n                      </button>\n                      <button onClick={() => {\n                              this.setState({yRange: null})\n                              document.getElementById(\"yRangeMin\").value = \"\";\n                              document.getElementById(\"yRangeMax\").value = \"\";\n                          }}>\n                            {\"Clear\"}\n                      </button>\n                      </div>\n                      {/* <div>\n                          <input type=\"checkbox\" name=\"absPos\" value=\"test\" checked={this.state.absPos} onClick={this.togglePos}/> Use absolute position\n                      </div> */}\n                  </div>\n              </ChartControls>\n        \n        )\n    }\n    \n    \n    // onWheel(event) {\n    \n    //     console.log(\"Used MouseWheel on plot\");\n    //     console.log(\"event: \", event.deltaY);\n    \n    // };\n    \n    render() {\n        let {id, channels, tileIDs, height, width} = this.props;\n        let { xRange } = this.state;\n        let min=0, max = 0;\n        let barPresent = false;\n        let numTicks = 0;\n        var textChannels = [];\n     //   if (this.state.fixed_x) {\n            \n            channels.forEach( (c) => {\n                //console.log(\"channel: \", c)\n                if (c.data.length > 0) {\n                    min = Math.min(min, c.data[0].x);\n                    max = Math.max(max, c.data[c.data.length-1].x)\n                }\n                if (c.plottype === \"bar\") {\n                    barPresent = true;  \n                }\n                \n                if (c.plottype === \"text\") {\n                    textChannels.push(c);\n                }\n            });\n            \n        var plotChannels = channels.filter( c => (c.plottype !== \"text\"));\n        \n        if (xRange !== null) {\n            min = Math.max(0, max - xRange);\n            numTicks = max-min > 20 ? null : max-min;\n        } else {\n            min = Math.max(0, max - 10);\n        }\n        \n        max = Math.max(10, max);\n            \n        // let className = classNames(\"tile\", {\"draggable\": this.state.absPos, \"fixed\": !this.state.absPos})\n        // let style = {left: this.state.pos.x, top: this.state.pos.y}\n     //   }\n        return (\n            <div className={\"tile\"} //style={style} \n                // onMouseDown={this.onMouseDown}\n                // onMouseUp={this.onMouseUp}\n                // onMouseMove={this.onMouseMove}\n                >\n                Chart number: {id}\n                <FlexibleWidthXYPlot \n                        width={width}\n                        height={height}\n                        dontCheckIfEmpty={false}\n                        // onWheel={this.onWheel}\n                        xType={barPresent ? \"ordinal\" : \"linear\"}\n                        xDomain={this.state.xRange ? [min,max] : null} \n                        yDomain={this.state.yRange}\n                        margin={{\"left\": 80, \"right\": 40}}>\n                    {this.createChannels(plotChannels)}\n                    \n                    <Borders style={{\n                    bottom: {fill: '#fff'},\n                    left: {fill: '#fff'},\n                    right: {fill: '#fff'},\n                    top: {fill: '#fff'}\n                  }}/>\n                    <XAxis tickTotal={this.state.xRange ? numTicks : null} />\n                    <YAxis />\n                </FlexibleWidthXYPlot>\n                \n                <div className=\"textPlots\">\n                    {this.createTextChannels(textChannels)}\n                </div>\n                <div className=\"chartCtrl\">\n                    { this.createChartCtrl(channels, tileIDs)}\n                </div>\n            </div>\n    );\n  }\n\n}\n\nChart.propTypes = {\n    height:     PropTypes.number,\n    tileIDs:    PropTypes.array\n}\n\nChart.defaultProps = {\n    channel:    \"\",\n    color: \"black\",\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChartControls from \"./chartControls\";\nimport Text from \"./textplot\";\n\nexport default class TextOutput extends PureComponent {\n    \n    createTextChannels(channels) {\n        return channels.map( (c) => {\n            //Create copy in order to trigger rendere when data changes!\n            //let tmpData =c.data.slice();\n            console.log(\"create Text Channels: \", c.data)\n            return <Text data={c.data} />\n        \n        });\n    \n    }\n    \n    createChartCtrl(channels, tileIDs) {\n        /*let options = tileIDs.map( (tile) => {\n                                    return <option value={tile}>{tile}</option>\n                                });\n        options = options.concat(<option value=\"new\">New</option>);\n        */\n        return (\n            <ChartControls title={\"TextOutput settings\"} group={\"Text series\"}>\n                  <div name={\"Text series\"}>\n                      {channels.map( (c) => {\n                          return ([\n                          <div>\n                             <div> Channel: {c.id} </div>\n                             <div> Color:  <input type=\"color\" id=\"color\" \n                                            value={c.color} \n                                            onInput={ (e) => {\n                                                this.props.colorChanged(c.id, e.target);\n                                                }\n                                            } />\n                            </div>\n                            <button onClick={ () => {this.props.togglePauseChannel(c) } } >\n                               {c.paused ? \"Resume Channel\" : \"Pause Channel\"}\n                             </button>                            \n                             <button onClick={ () => {this.props.removeChannel(c.id) } } >\n                                Remove Channel\n                             </button>\n                         </div> \n                         ])})\n                      }\n                  </div>\n                  <div name={\"Display\"} >\n                      TODO\n                  </div>\n              </ChartControls>\n        \n        )\n    }\n    \n    \n    \n    render() {\n        let {id, textChannels, tileIDs} = this.props;\n        console.log(\"Render textOutput\");\n            \n        return (\n            <div className=\"text-tile\">\n                TextOutput number: {id}\n                <div className=\"textSeries\">\n                    {this.createTextChannels(textChannels)}\n                </div>\n                <div className=\"chartCtrl\">\n                    {this.createChartCtrl(textChannels, tileIDs)}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nTextOutput.propTypes = {\n    width:      PropTypes.number,\n    height:     PropTypes.number,\n    tileIDs:    PropTypes.array\n}\n\nTextOutput.defaultProps = {\n    channel:    \"\",\n    color: \"black\",\n    width: 200,\n    height: 100\n}\n","import React, { PureComponent } from 'react';\n\nexport class ConfigLoader extends PureComponent\n{\n    constructor(props)\n    {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e)\n    {\n        console.log(e.target.files);\n\n        var reader = new FileReader();\n\n        // Closure to capture the file information.\n        reader.onload = (file) => {\n            console.log(\"loaded: \", file.target.result);\n            let newLayout = JSON.parse(file.target.result);\n            this.props.layoutLoaded(newLayout);\n        };\n\n        reader.readAsText(e.target.files[0])\n    }\n\n    render ()\n    {\n        return <div>\n            <input type=\"file\" onChange={this.handleChange} accept=\".json\"/>\n        </div>;\n    }\n}\n\n\nexport class ConfigSaver extends PureComponent {\n\n    constructor(props)\n    {\n        super(props);\n        this.onSave = this.onSave.bind(this);\n    }\n\n    onSave() {\n\n        let layoutstring = JSON.stringify(this.props.layout, null, 2);\n        var blob = new Blob([layoutstring], {type: \"application/json\"});\n        var url  = URL.createObjectURL(blob);\n        var downloadAnchorNode = document.getElementById('downloadAnchorElem');\n        downloadAnchorNode.setAttribute(\"href\", url);\n        downloadAnchorNode.setAttribute(\"download\", \"layout.json\");\n        downloadAnchorNode.click();\n    }\n\n    render() {\n\n        return <div>\n                <button onClick={this.onSave}>Save Config</button>\n                <a id=\"downloadAnchorElem\" style={{\"display\":\"none\"}}></a>\n            </div>\n    }\n}","import React, { Component } from 'react';\n\nimport classNames from 'classnames';\n\nexport default class ModuleSelection extends Component {\n    constructor (props, context) {\n        super(props, context)\n\n        this.state = {\n            selectedID: null\n        }\n    }\n\n\n    render () {\n        var { moduleList } = this.props;\n\n        return (\n            <div>\n                <div className=\"module-selection\">\n                    {moduleList.map( (m) => {\n                        return(<div key={m.id} className={classNames(\"module\", {\"selected\": m.id === this.state.selectedID})} onClick={ (e) => {this.setState({selectedID: m.id})}}>\n                            <img src={m.img} alt={\"Test\"} width={80}/>\n                            <span>{m.name}</span>\n                        </div>)\n                    })}\n                </div>\n                <button onClick={ () => {this.props.addModule(this.state.selectedID) } } >\n                    Add Module\n                </button>\n            </div>\n\n        )\n    }\n\n}","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CollapsibleCard from './collapsibleCard';\nimport TabView from \"./tabView\";\nimport {ConfigLoader, ConfigSaver}  from \"./configIO.js\"\nimport ModuleSelection from './moduleSelection';\n\nexport default class ChannelCtrl extends PureComponent {\n\n    constructor(props) {\n        super(props)\n        \n        this.newChannel = this.newChannel.bind(this);\n        this.addSimpleChannel = this.addSimpleChannel.bind(this);\n        this.probeConnection = this.probeConnection.bind(this);\n        this.createChannelSettings = this.createChannelSettings.bind(this);\n        this.createSingleChannelSettings = this.createSingleChannelSettings.bind(this);\n        \n        this.activateChannel = this.activateChannel.bind(this);\n        this.removeChannel = this.removeChannel.bind(this);\n\n    }\n\n    \n    \n    activateChannel(e) {\n        //console.log(\"pressed button for channel: \", e.target.id);\n        \n        let connection = document.getElementById(\"connection\").value;\n        let channelId = Number(e.target.id.split(\"_\")[0]);\n        \n        let key = document.getElementById(channelId+\"_key\").value;\n        let plottype = document.getElementById(channelId+\"_plottype\").value;\n        let color = document.getElementById(channelId+\"_color\").value;\n        let tileId = document.getElementById(channelId+\"_tile\").value;\n        \n        this.props.updateChannel(connection, channelId, key, plottype, color, tileId);\n    }\n    \n    removeChannel(e) {\n        //let connection = document.getElementById(\"connection\").value;\n        let channelId = e.target.id.split(\"_\")[0];\n        \n        this.props.removeChannel(channelId);\n    \n    }\n    \n    \n    newChannel() {\n        let connection = document.getElementById(\"connection\").value;\n        this.props.addNewChannel(connection);\n    }\n\n    addSimpleChannel() {\n        let channel = document.getElementById(\"channel\").value;\n        let plottype = document.getElementById(\"plottype\").value;\n        let color = document.getElementById(\"color\").value;\n        let tileId = document.getElementById(\"tile\").value;\n        this.props.addSimpleChannel(channel, plottype, color, tileId);\n    }\n\n\n    probeConnection() {\n        let connection = document.getElementById(\"connection\").value;\n        this.props.probeConnection(connection);\n    }\n    \n    \n    \n    createSingleChannelSettings(channel) {\n        return (\n            <div>\n                Channel {channel.id}: \n                Key: <input type=\"text\" id={channel.id + \"_key\"} defaultValue={channel.key}/>\n                Plottype: <select id={channel.id + \"_plottype\"} onChange={this.props.changePlottype} \n                                defaultValue={channel.plottype ? channel.plottype : \"line\"}>\n                            <option value=\"line\">Lineplot</option>\n                            <option value=\"bar\">Barplot</option>\n                            <option value=\"text\">Text</option>\n                          </select>     \n                Color:  <input type=\"color\" id={channel.id + \"_color\"} defaultValue={channel.color}/>\n                Panel: <select id={channel.id + \"_tile\"} defaultValue={channel.tile >= 0 ? channel.tile : \"new\"}>\n                                {this.options}\n                            </select>\n                \n                <button id={channel.id + \"_activateBtn\"} onClick={this.activateChannel} >\n                    Activate\n                </button>\n                <button id={channel.id + \"_removeBtn\"} onClick={this.removeChannel} >\n                    Remove\n                </button>\n            </div>\n        )    \n    }\n    \n    createChannelSettings() {\n    \n        let channels = this.props.advancedChannels;\n        return channels.map(this.createSingleChannelSettings);\n    }\n \n    render() {\n    \n        let tiles = this.props.tiles;\n        \n        let options = tiles.map( (tile) => {\n                                    return <option value={tile.id}>{tile.id}</option>\n                                });\n        options = options.concat(<option value=\"new\">New</option>);\n    \n        this.options = options;\n        return (\n            <CollapsibleCard title=\"Channel Control\" expandedByDefault={true}>\n                <TabView group=\"Simple\">\n                    <div name={\"Simple\"}>\n                        Channel: <input type=\"text\" id=\"channel\" />\n                        Plottype: <select id=\"plottype\" onChange={this.props.changePlottype} >\n                                    <option value=\"line\">Lineplot</option>\n                                    <option value=\"bar\">Barplot</option>\n                                    <option value=\"text\">Text</option>\n                                  </select>     \n                        Color:  <input type=\"color\" id=\"color\" />\n                        Add to panel: <select id=\"tile\">\n                                        {options}\n                                    </select>\n                        \n                        <button onClick={this.addSimpleChannel} >\n                            Add Channel\n                        </button>\n                    </div>\n                    <div name={\"Advanced\"}>\n                        Input connection: <input type=\"text\" id=\"connection\" /> \n                        <button onClick={this.probeConnection} >\n                                Try listen\n                        </button> \n                        <div>\n                            {JSON.stringify(this.props.probeMessage)}\n                        </div>\n                        \n                        \n                        <div className=\"channelList\">\n                            Current Channels for this connection:\n                            {this.createChannelSettings()}\n                            <button onClick={this.newChannel} >\n                                Add channel to this connection\n                            </button> \n                        </div>\n                        \n                    </div>\n                    <div name=\"Config-Layout\">\n                        <ConfigLoader layoutLoaded={this.props.layoutLoaded}/>\n                        <ConfigSaver layout={this.props.layout}/>\n                    </div>\n                    <div name=\"Options\">\n                        Header: <input type=\"text\" id=\"header\" onChange={this.props.headerChanged} value={this.props.header}/>\n                    </div>\n                    <div name=\"Modules\">\n                        <ModuleSelection moduleList={this.props.modules} addModule={this.props.addModule}/>\n                    </div>\n                </TabView>\n            </CollapsibleCard>\n\n        )\n    }\n}\n\nChannelCtrl.propTypes = {\n    tiles:          PropTypes.array,\n    addChannel:     PropTypes.func\n}","import React, { Component } from 'react';\nimport classnames from 'classnames';\n\n\nclass Element extends Component {\n\n\n    render() {\n\n        if (this.props.children) {\n\n            return (\n                <div {...this.props} className={classnames('element', this.props.className)} >\n                    <div className=\"element_handle\">{this.props.id}</div>\n                    {this.props.children}\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Element;","import React, { PureComponent } from 'react';\nimport {connect} from 'react-redux';\n\nimport {FlexibleWidthXYPlot, XAxis, YAxis, Borders, \n    VerticalGridLines, LineSeries, VerticalBarSeries} from \"react-vis\"; // ./3rdParty/\n\n\n// An object specifying the kind of information which is requested when creating\n// a new LinePlot\nexport const LinePlotInformation = {\n    type: \"LinePlot\",\n    dataSrc: {\n        channel: \"tcp:9080\",\n        dataKeys: [{\"name\": \"Payload key\", \"val\": \"y\", \"log\": true}],\n        color: \"black\",\n        strokes: \"\"\n    },\n    title: \"LinePlot\",\n    width: 10,\n    height: 6,\n    allowMultipleSources: true\n}\n\nfunction createLineSeries(channelState, stepNr, sourceProps) {\n    let data = channelState[sourceProps.dataKeys[0].val].map((el, i) => {\n        if (i > stepNr) {return []}\n        return {\"x\": i, \"y\": el}\n        })\n    return <LineSeries key={sourceProps.dataKeys[0].val} \n                data={data} \n            stroke={sourceProps.color} strokeDasharray={sourceProps.strokes} />\n}\n\n\nfunction mapStateToPropsLines(state, ownProps) {\n    let data = state.data\n    let lines = [];\n    let vlines = []\n    let sources = ownProps.config;\n    for (var id in sources) {\n        let channelData = data.channels[sources[id].channel]\n        if (channelData && channelData[sources[id].dataKeys[0].val]) { \n            lines.push(createLineSeries(channelData, state.data.stepNr, sources[id])) //Assumes state.stepNr exists!\n        } \n    }\n    return {lines: lines, vlines: vlines}\n}\n\nclass LinePlot extends PureComponent {\n\n    // componentDidMount() {\n    //     this.props.configCallback()\n    // }\n\n    render() {\n        let {width, height, lines, vlines} = this.props;\n\n        return(\n            <FlexibleWidthXYPlot \n                width={width} \n                height={height} \n                dontCheckIfEmpty={true}\n                margin={{\"left\": 60, \"right\": 30}}\n                >\n                {lines}\n                <Borders style={{\n                    bottom: {fill: '#fff'},\n                    left: {fill: '#fff'},\n                    right: {fill: '#fff'},\n                    top: {fill: '#fff'}\n                }}/>\n                {lines.length > 0 ? <XAxis /> : null}\n                {lines.length > 0 ? <YAxis /> : null}\n            <VerticalGridLines tickValues={vlines}/>\n        </FlexibleWidthXYPlot>\n        )\n    }\n}\n\nLinePlot.defaultProps = {\n    width: 600,\n    height: 400,\n    lines: [],\n    vlines: [],\n  };\n\nconst LinePlotStore = connect(mapStateToPropsLines)(LinePlot);\n\nexport {LinePlotStore};\n\n\nexport const BarPlotInformation = {\n    type: \"BarPlot\",\n    dataSrc: {\n        channel: \"tcp:9080\",\n        dataKeys: [{\"name\": \"Payload key\", \"val\": \"dist\", \"log\": false}],\n        color: \"black\",\n    },\n    title: \"BarPlot\",\n    width: 10,\n    height: 6,\n    allowMultipleSources: true\n}\n\nfunction createBarSeries(channelState, stepNr, sourceProps) {\n    var bardata = []\n    let data = channelState[sourceProps.dataKeys[0].val]\n    let type = Object.prototype.toString.call(data) \n\n    if (stepNr) {\n        // If stepNr is set, we are assuming to have a store of data objects\n        data = data[stepNr]\n    }\n\n    if (type == '[object Array]') {\n        bardata = data.map( (el,i) => {\n            return {\"x\": el[0], \"y\": el[1]}\n        })\n    } else if (type == '[object Object]') {\n        for (var key in data) {\n            bardata.push({\"x\": key, \"y\": data[key]})\n        }\n    }\n\n    return <VerticalBarSeries key={sourceProps.dataKeys[0].val} \n                             data={bardata} \n                             color={sourceProps.color} />\n}\n\nfunction mapStateToPropsBars(state, ownProps) {\n    let data = state.data\n    let bars = [];\n    let sources = ownProps.config;\n    for (var id in sources) {\n        let channelData = data.channels[sources[id].channel];\n        if (channelData && channelData[sources[id].dataKeys[0].val]) { \n            bars.push(createBarSeries(channelData, state.stepNr, sources[id])) //Assumes state.stepNr exists!\n        } \n    }\n    return {bars: bars}\n}\n\nexport class BarPlot extends PureComponent {\n\n    render() {\n        let {width, height, bars} = this.props;\n\n        return(\n            <FlexibleWidthXYPlot \n                    width={width} \n                    height={height} \n                    dontCheckIfEmpty={true}\n                    margin={{\"left\": 60, \"right\": 100}}\n                    xType={\"ordinal\"}\n                    yDomain={[0,1]}\n            >\n                {bars}\n                <Borders style={{\n                    bottom: {fill: '#fff'},\n                    left: {fill: '#fff'},\n                    right: {fill: '#fff'},\n                    top: {fill: '#fff'}\n                }}/>\n                {bars.length > 0 ? <XAxis /> : null}\n                {bars.length > 0 ? <YAxis /> : null}\n                        \n            </FlexibleWidthXYPlot>\n        )\n    }\n}\n\nconst BarPlotStore = connect(mapStateToPropsBars)(BarPlot);\n\nexport {BarPlotStore};","import React, { PureComponent } from 'react'\nimport {connect} from 'react-redux';\nimport Slider from 'react-rangeslider'\n\n// To include the default styles\nimport 'react-rangeslider/lib/index.css'\n// import { connect } from 'tls';\n\n\nexport const SliderInformation = {\n  type: \"Slider\",\n  dataSrc: {\n      channel: \"tcp:9080\",\n      dataKeys: [{\"name\": \"Payload key\", \"val\": \"y\", \"log\": null}],\n  },\n  title: \"Slider\",\n  width: 10,\n  height: 2,\n  allowMultipleSources: false\n}\n\nfunction mapStateToProps(state, ownProps) {\n    let data = state.data\n    let source = ownProps.config[0]; //There should only be one in a slider\n\n    let minV = 0;\n    let maxV = Infinity;\n    \n\n    let channelData = data.channels[source.channel]\n    if (channelData && channelData[source.dataKeys[0].val]) { \n      maxV = channelData[source.dataKeys[0].val].length;\n    }\n\n    let value = maxV;  \n    if (state.data.stepNr) {\n      value = state.data.stepNr;\n    } \n    return {min: minV, max: maxV, value: value}\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      onSliderChange: (v) => {\n        let action = {\n          type: \"SET_STEPNR\",\n          stepNr: v\n        }\n        dispatch(action);\n      }\n  }\n}\n\n\nclass CustomSlider extends PureComponent {\n\n  handleChangeSlider = value => {\n    this.props.onSliderChange(value);\n  };\n\n\n  render () {\n    // const { value } = this.state\n    const labels = {\n      0: '',\n      50: '',\n      100: ''\n    }\n\n    const {min, max, value} = this.props;\n\n    console.log(\"max val: \", max);\n\n    const formatkg = value => value + ' kg'\n\n    return (\n      <div className='slider custom-labels'>\n        <Slider\n          min={min}\n          max={max}\n          value={value}\n          labels={labels}\n          // handleLabe\n          l={value}\n          onChange={this.handleChangeSlider}\n          \n        />\n        <div className='value'>{value}</div>\n      </div>\n    )\n  }\n}\n\nexport default CustomSlider;\n\nexport const CustomSliderStore = connect(mapStateToProps, mapDispatchToProps)(CustomSlider)","import React, { Component } from 'react';\n\n\nclass SourceBlock extends Component {\n\n    render() {\n        let {id, sourceInformation, curVals, allowRemoval} = this.props;\n\n        let elements = []\n\n        for (var key in sourceInformation) {\n            let oldVal = curVals[key];\n            if (Object.prototype.toString.call(oldVal) == '[object Array]') {\n                // console.log(\"old val: \", oldVal)\n                for (var i=0; i < oldVal.length; i++) {\n                    let dataKeyObj = oldVal[i];\n                    const listIdx = i;\n                    elements.push(\n                        <span>{dataKeyObj.name} : <input type=\"text\" id={dataKeyObj.name} value={dataKeyObj.val} onChange={e => this.props.updateValues(e, \"dataConfig\", id, listIdx, \"val\")}/>  \n                        {dataKeyObj.log !== null ? [\"Log :\", <input type=\"checkbox\" id={dataKeyObj.name} value={dataKeyObj.log} checked={dataKeyObj.log} onChange={e => this.props.updateValues(e, \"dataConfig\", id, listIdx, \"log\")}/> ]: null}\n                        </span>\n                        );\n                }\n            } else {\n                if (key == \"color\") {\n                    elements.push(\n                        <span>{key} : <input type=\"color\" id={key} value={oldVal} onChange={e => this.props.updateValues(e, \"dataConfig\", id)}/>  </span>\n                        );\n                } else {\n                    elements.push(\n                    <span>{key} : <input type=\"text\" id={key} value={oldVal} onChange={e => this.props.updateValues(e, \"dataConfig\", id)}/>  </span>\n                    );\n                }\n            }\n        }\n\n        return(\n            <div className={\"bordered vflex margin\"}>\n                {id}\n                {elements}\n                <button onClick={ () => {this.props.removeDataSource(id)}} disabled={!allowRemoval}>\n                        Remove Source\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default class ModuleConfiguration extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            dataConfig: {0: JSON.parse(JSON.stringify(props.moduleInformation.dataSrc))},\n            moduleConfig: { title: props.moduleInformation.title,\n                            width: props.moduleInformation.width,\n                            height: props.moduleInformation.height},\n            idCounter: 0\n        }\n        this.removeDataSource = this.removeDataSource.bind(this);\n        this.updateValues = this.updateValues.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n    \n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    handleClickOutside(event) {\n        if (!this.containerDiv.contains(event.target)) {\n            this.props.closeConfig();\n        }\n    }\n    \n\n    updateValues(e, config, key1=null, key2=null, key3=null) {\n        var newState = {...this.state};\n        var newConfig = {...newState[config]};\n\n        let attribKey = e.target.id;\n        let val = key3 === \"log\" ? e.target.checked : e.target.value;\n\n        // let acc = [key1,key2];\n        // console.log(\"acc: \", acc)\n\n        let modifyPart = newConfig\n        if (key1 !== null) {\n            modifyPart = modifyPart[key1]\n        }\n        if (key2 !== null) {\n            modifyPart = modifyPart.dataKeys[key2]\n        }\n        // let finalVal = acc.reduce( (prev, curr) => {\n            // return curr === null ? prev : prev[curr]\n        // }, newConfig)\n        if (key3 === null) {\n            modifyPart[attribKey] = val;\n        } else {\n            modifyPart[key3] = val;\n        }\n\n        newState[config] = newConfig;\n        this.setState(newState)\n    }\n\n    addDataSource() {\n        const newID = this.state.idCounter+1;\n        var newState = {...this.state};\n        console.log(\"new state: \", newState)\n        newState.idCounter = newID;\n        newState.dataConfig[newID] = JSON.parse(JSON.stringify(this.props.moduleInformation.dataSrc));\n        this.setState(newState);\n    }\n\n    removeDataSource(id) {\n        var newState = {...this.state};\n        console.log(\"new state: \", newState)\n        delete newState.dataConfig[id];\n        this.setState(newState);\n    }\n\n    createDataSrcInputs(dataSrcInformation) {\n        let sourceBlocks = [];\n        // console.log(\"create data src inputs state: \", this.state)\n        // console.log(\"data Src: \", dataSrcInformation)\n        for (var id in this.state.dataConfig) {\n            sourceBlocks.push(<SourceBlock key={id} id={id} \n                                    sourceInformation={dataSrcInformation} \n                                    curVals={this.state.dataConfig[id]} \n                                    removeDataSource={this.removeDataSource}\n                                    updateValues={this.updateValues}\n                                    allowRemoval={Object.keys(this.state.dataConfig).length > 1}\n                            />)\n        }\n        return sourceBlocks;\n    }\n\n    render() {\n\n        let {children, moduleInformation} = this.props;\n\n        return(\n            <div className={\"moduleConfig\"} ref={node => this.containerDiv = node}>\n                <div className={\"vflex\"}>\n                    <h4>{moduleInformation.type}</h4>    \n                    <span>Title: <input type=\"text\" id=\"title\" value={this.state.moduleConfig.title} \n                        onChange={e => this.updateValues(e, \"moduleConfig\")} /> </span>\n                    <span>Width # Cols: <input type=\"text\" id=\"width\" value={this.state.moduleConfig.width} \n                        onChange={e => this.updateValues(e, \"moduleConfig\")} /> </span>\n                    <span>Height # Rows: <input type=\"text\" id=\"height\" value={this.state.moduleConfig.height}\n                        onChange={e => this.updateValues(e, \"moduleConfig\")}/></span>\n                    <div className={\"borderedContainer\"}>\n                        {this.createDataSrcInputs(moduleInformation.dataSrc)}\n                        {moduleInformation.allowMultipleSources ? <button onClick={ () => {this.addDataSource()}}>\n                        Add Data Source\n                    </button> : \"\"}\n                    </div>\n                    {children}\n                    <button onClick={ () => {this.props.createModule(moduleInformation.type, {...this.state})}}>\n                        Create Module\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}","import { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport io from \"socket.io-client\";\n\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        dispatch: dispatch\n    }\n}\n\nexport default class SocketConnection extends Component {\n    constructor(store) {\n        super()\n\n        this.state = {\n            channels: {}\n        }\n\n        this.updateData = this.updateData.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.addConnection = this.addConnection.bind(this);\n        this.removeConnection = this.removeConnection.bind(this);\n        this._updateStore = this._updateStore.bind(this);\n\n        // let connection = \"tcp:9080\";\n        // this.socket.emit(\"add_connection\", connection);\n    }\n\n    componentDidMount() {\n        this.socket = io.connect(\"http://localhost:5000\", {transport:[\"websocket\"]});\n        \n        this.socket.on(\"connect\", function() {\n            console.log(\"Connected\");\n        });\n        \n        this.socket.on(\"update_data\", this.updateData);\n\n\n        this.props.addConnection(this.addConnection);\n        this.props.removeConnection(this.removeConnection);\n\n\n        console.log(\"send adding message\")\n        let addFunction = {\n            type: \"ADD_MSG_FNC\",\n            payload: this.sendMessage\n        }\n        this.props.dispatch(addFunction);\n        \n    }\n\n    sendMessage(channel, message){\n        this.socket.emit(\"message\", channel,\n                        JSON.stringify(message))\n    }\n\n\n\n    updateData(msg) {\n        console.log(\"Received Message: \", msg);\n        // console.log(\"this.state in update: \", this.state);\n        let channel = msg.connection;\n        if (channel in this.state.channels) {\n            let channelConfig = this.state.channels[channel];\n            for (var i=0; i<channelConfig.length; i++) {\n                let dataKey = channelConfig[i].val;\n                let shouldLog = channelConfig[i].log;\n                if (dataKey in msg) {\n                    this._updateStore(channel, dataKey, msg[dataKey], shouldLog)\n                } else {\n                    //Ignore\n                }\n            }\n        }\n    }\n\n    _updateStore(channel, dataKey, payload, shouldLog) {\n        if (shouldLog === null) {\n            return;\n        }\n        let updateAction = {\n            type: shouldLog ?  \"UPDATE_CHANNEL_ADD\" : \"UPDATE_CHANNEL_REPLACE\",\n            channel: channel,\n            dataKey: dataKey,\n            payload: payload,\n        }\n        this.props.dispatch(updateAction);\n    }\n\n    addConnection(connectionInfo) {\n        let channel = connectionInfo.channel\n        // console.log(\"add connection: \", connectionInfo);\n        this.socket.emit(\"add_connection\", channel);\n\n        let newChannels = {...this.state.channels};\n        if (newChannels[channel]) {\n            newChannels[channel] = newChannels[channel].concat(connectionInfo.dataKeys);\n        } else {\n            newChannels[channel] = connectionInfo.dataKeys\n        }\n\n        //This should not be done, but otherwise, state is not updated\n        //quick enough...\n        this.state = {...this.state,\n            channels: newChannels\n        }\n        //For some reason we still seem to need this for anything to happen...\n        this.setState(this.state);\n    }\n\n    removeConnection(connection, dataKeys) {\n        let cleanAction = {\n            type: \"CLEAN_CHANNEL\",\n            channel: connection,\n            dataKeys: dataKeys\n        }\n        this.props.dispatch(cleanAction);\n\n\n        let newChannels = {...this.state.channels};\n        let channel = newChannels[connection].filter( c => {\n            for (var i=0; i<dataKeys.length; i++) {\n                let key = dataKeys[i];\n                if (c.val !== key.val) {\n                    return c\n                }\n            }\n        })\n\n        newChannels[connection] = channel;\n        if (channel.length === 0) {\n            this.socket.emit(\"remove_connection\", connection);\n        }\n\n        //This should not be done, but otherwise, state is not updated\n        //quick enough...\n        this.state = {...this.state,\n            channels: newChannels\n        }\n        //For some reason we still seem to need this for anything to happen...\n        this.setState(this.state);\n    }\n\n    render() {\n        return null\n    }\n\n}\n\nexport const SocketConnectionStore = connect(null, mapDispatchToProps)(SocketConnection)","import React, { PureComponent } from 'react';\n\nclass CanvasGridworld extends PureComponent {\n\n    constructor (props, context) {\n        super(props, context)\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n            this.updateCanvas();\n    }\n\n    renderMap() {\n        let map = this.props.map.map;\n        let canvas = this.refs[this.props.bgname];\n        // let canvas = document.getElementById(this.props.name);\n        let context = canvas.getContext('2d');\n\n        // var canvasMaxWidth = window.innerWidth * scaling;\n        // var canvasMaxHeight = window.innerHeight * scaling;\n\n        let canvasMaxWidth = canvas.width;\n        let canvasMaxHeight = canvas.height;\n\n        var tileSize = Math.min(Math.floor(canvasMaxWidth/map[0].length), Math.floor(canvasMaxHeight/map.length));\n        canvas.width = tileSize*map[0].length;\n        canvas.height = tileSize*map.length;\n        context.clearRect(0, 0, canvas.width, canvas.height);            \n\n        let renderTile = this.renderTile;\n\n        const showTrueTarget = this.props.showTrueTarget;\n        const showBeliefSymbols = this.props.showBeliefSymbols;\n        const goalPos = this.props.map.goalPos;\n        const targets = this.props.map.targets;\n        const goalBeliefs = this.props.beliefs ? this.props.beliefs.goal: null;\n        const worldBelief = this.props.beliefs ? this.props.beliefs.world : null;\n\n        const showVisibles = this.props.showVisibles;\n        const showBeliefedVision = this.props.showBeliefedVision;\n        const visibles = this.props.visibles;\n\n\n        if (visibles && (showVisibles || (showBeliefedVision && worldBelief === \"FreeSpace\"))) {\n            // Render everything black and only render visible tiles!\n            context.fillStyle = \"black\";\n            context.fillRect(0,0, canvas.width, canvas.height);\n            visibles.forEach(function(el) {\n                let tile = Object.assign({}, map[el[0]][el[1]]);\n                renderTile(context, tile, tileSize, el[1], el[0]);\n            })\n        } else {\n            map.forEach(function(row,i, arr) {\n                row.forEach(function(tile, j, row) { \n                        tile = Object.assign({}, tile);\n                        if ((showTrueTarget) && i === goalPos[0] && j === goalPos[1]) {\n                            \n                            tile.color = \"green\";\n                            tile.symbol = \"T\";\n                        }   \n                        renderTile(context, tile, tileSize, j, i);\n                })\n            })\n\n        }\n\n        if (showBeliefSymbols && goalBeliefs) {\n            for (var i=0; i<targets.length; i++) {\n                let pos = targets[i].key;\n                let tile = Object.assign({}, map[pos[0]][pos[1]]);\n                tile.symbol = goalBeliefs[i];\n                tile.color = \"lightblue\";\n                renderTile(context, tile, tileSize, pos[1], pos[0]);\n            }\n        }\n\n        if (goalBeliefs) {\n            targets.forEach( (tile,i) => {\n                let pos = tile.key;\n                let symbol = tile.val.symbol;\n                let beliefSymbol = goalBeliefs[i];\n                if (beliefSymbol == this.props.beliefs.desire) {\n                    let tileContent = Object.assign({}, tile.val);\n                    tileContent.color = \"lightgreen\";\n                    tileContent.symbol = beliefSymbol;\n                    renderTile(context, tileContent, tileSize, pos[1], pos[0]);\n                }\n            });\n        }\n\n        if (this.props.showTargets) {\n            targets.forEach( tile => {\n                let pos = tile.key;\n                let symbold = tile.val.symbol;\n                let tileContent = Object.assign({}, tile.val);\n\n                if (!this.props.showTrueColor) {\n                    var hideTile = true;\n                    if (visibles) {\n                        for (var i in visibles) {\n                            if (visibles[i][0] == pos[0] && visibles[i][1] == pos[1]) {\n                                hideTile = false;\n                            }\n                        }\n                    } \n                    if (hideTile) {\n                        console.log(\"render green\")\n                        tileContent.color = \"green\";\n                        tileContent.symbol = \"\";\n                    }\n                }\n                if (showTrueTarget && pos[0] == goalPos[0] && pos[1] == goalPos[1]) {\n                    tileContent.symbol = \"T\";\n                }\n                renderTile(context, tileContent, tileSize, pos[1], pos[0]);\n            })\n        }\n\n        this.tileSize = tileSize;\n    }\n\n    renderTile(context, tile, tileSize, posX, posY) {\n        context.fillStyle = tile.color === \"\" ? \"rgba(255,255,255,1)\" : tile.color;\n        context.fillRect(posX * tileSize, posY* tileSize, tileSize, tileSize);\n\n        context.font = 0.8*tileSize +\"px Ariel\";\n        context.fillStyle = \"black\";\n        context.fillText(tile.symbol, posX*tileSize+0.2*tileSize, posY*tileSize+0.8*tileSize);\n    }\n\n    renderAgent() {\n        // tileSize = sizeInfo[0];\n        // canvas.width = sizeInfo[1];\n        // canvas.height = sizeInfo[2];\n        let tileSize = this.tileSize;\n        let posX = this.props.pos[1];\n        let posY = this.props.pos[0];\n        const canvas = this.refs[this.props.bgname];\n        var context = canvas.getContext(\"2d\");\n        context.strokeStyle = \"black\";\n        // context.clearRect(0, 0, canvas.width, canvas.height);\n        context.beginPath();\n        let centerX = posX*tileSize + tileSize/2;\n        let centerY = posY*tileSize + tileSize/2;\n        context.arc(centerX, centerY, \n                    tileSize*0.4, 0, 2*Math.PI);\n        context.fillStyle = \"yellow\";\n        context.fill();\n        context.stroke();\n        \n        let eyeSize = tileSize/16;\n        //Draw left eye\n        context.fillStyle = \"black\";\n        context.beginPath();\n        context.arc(centerX-tileSize/7, centerY-tileSize/12, eyeSize, 0, 2*Math.PI);\n        context.fill();\n        context.stroke();\n        \n        //Draw right eye\n        context.beginPath();\n        context.arc(centerX+tileSize/7, centerY-tileSize/12, eyeSize, 0, 2*Math.PI);\n        context.fill();\n        context.stroke();\n        \n        //Draw mouth\n        context.beginPath();\n        context.arc(centerX, centerY, tileSize/5, Math.PI*5/6, Math.PI*1/6, true);\n        context.stroke();\n        \n    }\n\n    renderPath() {\n        const canvas = this.refs[this.props.bgname];\n        let tileSize = this.tileSize;\n        let traj = this.props.traj;\n        \n        var context = canvas.getContext(\"2d\");         \n        context.strokeStyle = \"red\";\n        context.beginPath();\n        traj.forEach(function(pos, i, traj) {\n            \n            let centerX = pos[1]*tileSize + tileSize/2; // +offX;\n            let centerY = pos[0]*tileSize + tileSize/2; // +offY;\n            if (i == 0) {\n                context.moveTo(centerX, centerY);   \n            } else {\n                context.lineTo(centerX,centerY);\n            }\n            \n        })\n        context.stroke();       \n    }\n\n    updateCanvas() {\n        if (this.props.map) {\n            this.renderMap();\n\n            if (this.props.showPath) {\n                this.renderPath()\n            }\n            this.renderAgent();\n        };\n    }\n\n    render() {\n        let { bgname, fgname, width, height } = this.props;\n        return (\n            <div>\n                <canvas ref={bgname} width={width} height={height} />\n                {/* <canvas className={\"agentcanvas canvas\"} ref={fgname} width={width} height={height} /> */}\n            </div>\n        )\n    }\n\n}\n\nexport default CanvasGridworld;","import React, { Component } from 'react';\n\nimport CanvasGridworld from \"./gridworld\"\n\nclass ExperimentView extends Component {\n\n    constructor (props, context) {\n        super(props, context)\n        this.state = {\n          showTargets: props.beliefs ? false : true,\n          showTrueColor: props.beliefs ? false : true,\n          showTrueTarget: false,\n          showBeliefSymbols: props.beliefs ? true : false,\n          showPath: false,\n          showVisibles: false,\n          showBeliefedVision: false,\n          showSeenColor: false,\n          visiblesUpdated: false\n        }\n\n        this.onChangeShowTargets = this.onChangeShowTargets.bind(this);\n        this.onChangeShowTrueColor = this.onChangeShowTrueColor.bind(this);\n        this.onChangeShowTrueTarget = this.onChangeShowTrueTarget.bind(this);\n        this.onChangeShowBeliefSymbols = this.onChangeShowBeliefSymbols.bind(this);\n        this.onChangeShowPath = this.onChangeShowPath.bind(this);\n        this.onChangeShowVisibles = this.onChangeShowVisibles.bind(this);\n        this.onChangeShowBeliefedVision = this.onChangeShowBeliefedVision.bind(this);\n        this.onChangeShowSeenColor = this.onChangeShowSeenColor.bind(this);\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if ((!nextProps.visibles || nextProps.visibles.length === 0) && !prevState.visiblesUpdated ) {\n            return {showVisibles: false,\n                    visiblesUpdated: false,\n                    showBeliefedVision: false};\n        };\n\n        return {visiblesUpdated: false};\n    }\n\n    onChangeShowTargets() {\n        this.setState({\n            showTargets: !this.state.showTargets\n        })\n    }\n\n    onChangeShowTrueColor() {\n        this.setState({\n            showTrueColor: !this.state.showTrueColor\n        })\n    }\n\n    onChangeShowTrueTarget() {\n        this.setState({\n            showTrueTarget: !this.state.showTrueTarget\n        })\n    }\n\n    onChangeShowBeliefSymbols() {\n        this.setState({\n            showBeliefSymbols: !this.state.showBeliefSymbols\n        })\n    }\n\n    onChangeShowPath() {\n        this.setState({\n            showPath: !this.state.showPath\n        })\n    }\n\n    onChangeShowVisibles() {\n        this.props.requestVisibles()\n        this.setState({\n            showVisibles: !this.state.showVisibles,\n            visiblesUpdated: true\n        });\n    }\n\n    onChangeShowBeliefedVision() {\n        this.props.requestVisibles()\n        this.setState({\n            visiblesUpdated: true,\n            showBeliefedVision: !this.state.showBeliefedVision\n        })\n    }\n\n    onChangeShowSeenColor() {\n        this.props.requestVisibles()\n        this.setState({\n            visiblesUpdated: true,\n            showSeenColor: !this.state.showSeenColor\n        })\n    }\n\n    render() {\n        let { bgname, fgname, width, height, conditionName, pos, map, traj, visibles, beliefs } = this.props;\n        console.log(\"experiment view props: \", this.props);\n        return (\n            <div>\n                <div className=\"condition\">{conditionName}</div>\n                <CanvasGridworld width={width} height={height} \n                                map={map} bgname={bgname}\n                                showTargets={this.state.showTargets}\n                                showTrueTarget={this.state.showTrueTarget}\n                                showTrueColor={this.state.showTrueColor}\n                                showBeliefSymbols={this.state.showBeliefSymbols}\n                                showVisibles={this.state.showVisibles}\n                                showBeliefedVision={this.state.showBeliefedVision}\n                                showPath={this.state.showPath}\n                                visibles={visibles}\n                                visiblesUpdated={this.state.visiblesUpdated}\n                                beliefs={beliefs}\n                                traj={traj}\n                                pos={pos}\n                                />\n                <div className={\"controls flex\"}>\n                    <div>\n                        Show Targets:\n                        <input type=\"checkbox\" defaultChecked={this.state.showTargets} checked={this.state.showTargets} onChange={this.onChangeShowTargets} />\n                    </div>\n                    <div>\n                        Show True Color:\n                        <input type=\"checkbox\" defaultChecked={this.state.showTrueColor} checked={this.state.showTrueColor} onChange={this.onChangeShowTrueColor} />\n                    </div>\n                    <div>\n                        Show True Target:\n                        <input type=\"checkbox\" defaultChecked={this.state.showTrueTarget} checked={this.state.showTrueTarget} onChange={this.onChangeShowTrueTarget} />\n                    </div>\n                    <div>\n                        Show Belief Symbols:\n                        <input type=\"checkbox\" defaultChecked={this.state.showBeliefSymbols} checked={this.state.showBeliefSymbols} onChange={this.onChangeShowBeliefSymbols} />\n                    </div>\n                    <div>\n                        Show Seen Color:\n                        <input type=\"checkbox\" defaultChecked={this.state.showSeenColor} checked={this.state.showSeenColor} onChange={this.onChangeShowSeenColor} />\n                    </div>\n                    {this.props.traj ? <div>\n                        Show Path:\n                        <input type=\"checkbox\" defaultChecked={this.state.showPath} checked={this.state.showPath} onChange={this.onChangeShowPath} />\n                    </div> : \"\"}\n                    {this.props.beliefs ? <div>\n                        Show Visible area:\n                        <input type=\"checkbox\" defaultChecked={this.state.showVisibles} checked={this.state.showVisibles} onChange={this.onChangeShowVisibles} />\n                    </div> : \"\"}\n                    {this.props.beliefs ? <div>\n                        Show Beliefed Vision:\n                        <input type=\"checkbox\" defaultChecked={this.state.showBeliefedVision} checked={this.state.showBeliefedVision} onChange={this.onChangeShowBeliefedVision} />\n                    </div> : \"\"}\n                </div>\n                {/* <canvas className={\"agentcanvas canvas\"} ref={fgname} width={width} height={height} /> */}\n            </div>\n        )\n    }\n\n}\n\nexport default ExperimentView;","import {connect} from 'react-redux';\n\nimport ExperimentView from \"./experimentView\"\n\n\nexport const ExperimentViewInformation = {\n    type: \"ExperimentView\",\n    dataSrc: {\n        channel: \"zmq:5057\",\n        dataKeys: [{\"name\": \"Run Data\", \"val\": \"runData\", \"log\": false}],\n    },\n    title: \"ExperimentView\",\n    width: 10,\n    height: 6,\n    allowMultipleSources: false\n}\n\nfunction mapStateToProps(state, ownProps) {\n\n    console.log(\"State: \", state);\n    let data = state.data;\n    let source = ownProps.config[0]; //There is only 1 source\n    let channelData = data.channels[source.channel];\n    state.data.sendMessage(source.channel, {\"selection\": {\"condition\": \"condMap1_C2_V1\", \"runNr\": 1, \"methods\": {\"twg\":true}}});\n    let stepNr = 0;\n    let agentPos = null;\n    if (channelData && channelData[source.dataKeys[0].val]) { \n        channelData = channelData[source.dataKeys[0].val]\n        if (data.stepNr) {\n            stepNr = data.stepNr;\n        } else {\n            stepNr = channelData.agentPositions.length-1;\n        }\n        agentPos = channelData.agentPositions[stepNr]\n        return { bgname: \"bg\", \n             fgname: \"fb\", \n             conditionName: \"TO FIX\", \n             pos: agentPos, \n             map: {\"map\": channelData.map, \"targets\": channelData.targets, \"goalPos\": channelData.goalPos}, \n             traj: channelData.agentPositions.slice(0, stepNr+1), \n             visibles: channelData.visibles ? channelData.visibles[stepNr] : [], \n             beliefs: channelData.sampling ? channelData.sampling.sampleList[stepNr][0] : null}\n    } \n\n    return {}\n}\n\n\nconst ExperimentViewStore = connect(mapStateToProps)(ExperimentView);\n\nexport {ExperimentViewStore};","import React, { Component } from 'react';\n//import PropTypes from 'prop-types';\nimport io from \"socket.io-client\";\n\n\nimport Chart from \"./chart\";\nimport TextOutput from \"./textOutput\";\n\nimport ChannelCtrl from \"./channelCtrl\";\nimport GridLayout from 'react-grid-layout';\nimport Element from \"./element.js\";\nimport ChartControls from \"./chartControls\";\n\nimport {LinePlotStore, LinePlotInformation, BarPlotInformation, BarPlotStore} from \"./plots\";\nimport {SliderInformation, CustomSliderStore} from \"./slider\";\n\nimport ModuleConfiguration from \"./moduleConfiguration\";\nimport {SocketConnectionStore} from \"./io\"\n\nimport { ExperimentViewInformation, ExperimentViewStore } from './experimentViewStore';\n\nvar modules = [{id: 1,\n    name: \"LinePlot\",\n    img: null},\n    {id: 2,\n    name: \"BarPlot\",\n    img: null},\n    {id: 3,\n    name: \"Gridworld\",\n    img: null},\n    {id: 4,\n    name: \"Slider\",\n    img: null},\n    {id: 5,\n    name: \"ExperimentView\",\n    img: null}]\n\n\nconst mapIDToConfig = {1: LinePlotInformation, 2: BarPlotInformation, 4: SliderInformation, 5: ExperimentViewInformation}\nconst mapTypeToComponent = {\"LinePlot\": LinePlotStore, \"BarPlot\": BarPlotStore, \"Slider\": CustomSliderStore, \"ExperimentView\": ExperimentViewStore}\n\nexport default class Dashboard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tiles: [],\n            tileIDCounter: 0,\n            layout: [{\"i\": \"12\", \"w\":4, \"h\":3, \"x\": 0, \"y\":0}],\n            moduleConfig: null,\n            colWidth: 100,\n            rowHeight: 20\n        };\n\n        this.connectionMap = {};\n\n        this.addModule = this.addModule.bind(this);\n        this.closeConfig = this.closeConfig.bind(this);\n        this.createModule = this.createModule.bind(this);\n        this.createTile = this.createTile.bind(this);\n        \n        // For Layout:\n        this.onLayoutChange = this.onLayoutChange.bind(this);\n        this.layoutLoaded = this.layoutLoaded.bind(this);\n    }\n\n\n    // componentDidMount() {\n    //     this.socketConnection = new SocketConnection();\n    // }\n\n    closeConfig() {\n        this.setState({\n            moduleConfig: null\n        })\n    }\n\n    addModule(moduleId) {\n        console.log(\"Should add module: \", moduleId);\n        console.log(\"New state: \", this.state);\n        this.setState({\n            moduleConfig: mapIDToConfig[moduleId]\n        })\n\n    }\n\n    createModule(type, config) {\n        console.log(\"Should create module: \" + type + \" with config: \", config);\n\n        var newTiles = this.state.tiles;\n\n        var newTile = {\n            id: this.state.tileIDCounter,\n            title: config.moduleConfig.title,\n            type: type,\n            dataSources: JSON.parse(JSON.stringify(config.dataConfig))\n            \n        }\n\n        var newLayout = this.state.layout;\n        newLayout.push({\n            i: newTile.id.toString(),\n            w: parseInt(config.moduleConfig.width),\n            h: parseInt(config.moduleConfig.height),\n            x: 0,\n            y: Infinity\n        })\n\n        newTiles.push(newTile)\n        this.setState({\n            tiles: newTiles,\n            layout: newLayout,\n            tileIDCounter: newTile.id + 1, \n            moduleConfig: null\n        })\n\n        for (var dataSrc in config.dataConfig) {\n            let src = config.dataConfig[dataSrc]\n            if (this.connectionMap[src.channel]) {\n                //Add only if it does not already exist\n                if (this.connectionMap[src.channel].indexOf(newTile.id) == -1) {\n                    this.connectionMap[src.channel].push(newTile.id)\n                }\n            } else {\n                this.connectionMap[src.channel] = [newTile.id]\n            }\n            this.addConnection(src)\n        }\n\n        console.log(\"ConnectionMap after adding: \", this.connectionMap);\n    }\n\n    layoutLoaded(newLayout) {\n        this.setState({\n            layout: newLayout\n        })\n    }\n\n    onLayoutChange(newLayout) {\n        // console.log(\"new layout: \", newLayout);\n        this.setState({\n            layout: newLayout\n        })\n    }\n    \n\n    removeTile(tileId) {\n        console.log(\"should remove tile: \", tileId)\n\n        var removedTile = null;\n        let newTiles = this.state.tiles.filter( t => {\n            if (t.id !== tileId) {\n                return t\n            } else {\n                removedTile = t;\n            }\n        })\n        console.log(\"remvoedTile: \", removedTile)\n        console.log(\"conmap before: \", this.connectionMap);\n        for (var key in removedTile.dataSources) {\n            let src = removedTile.dataSources[key];\n            let idx = this.connectionMap[src.channel].indexOf(removedTile.id);\n            console.log(\"idx: \", idx);\n            if (idx > -1) {\n                this.connectionMap[src.channel].splice(idx, 1);\n            }\n            // if (this.connectionMap[src.channel].length == 0) {\n                this.removeConnection(src.channel, src.dataKeys)\n            // }\n        }\n\n        console.log(\"conmap after: \", this.connectionMap);\n\n        let newLayout = this.state.layout.filter( l => {\n            if (l.i !== tileId) {\n                return l\n            }\n        })\n\n        this.setState({\n            layout: newLayout,\n            tiles: newTiles\n        })\n    }\n\n    createDataSourceControl(sources) {\n        console.log(\"sources: \", sources);\n        // let res = sources.map( (s,i) => {\n\n        let blocks = []\n        for (var sID in sources) {\n\n            let elements = [];\n            for (var key in sources[sID]) {\n                let val = sources[sID][key];\n                elements.push(\n                    <span>{key} : <input type=\"text\" id={key} value={val}/></span>\n                    );\n            }\n\n            blocks.push(\n                <div name={\"Data Source \" + sID}>\n                    {elements}\n                </div>\n            )\n        // });\n        }\n        console.log(\"blocks: \", blocks);\n        return blocks;\n    }\n\n    createTile(tile) {\n        let Module = mapTypeToComponent[tile.type];\n\n        let layout = this.state.layout.filter( el => {\n            if (el.i == tile.id) {\n                return el\n            }\n        })[0]\n        let colWidth = this.state.colWidth;\n        let rowHeight = this.state.rowHeight;\n        let children = null;\n        let createControls = null;\n        return(\n            <Element key={tile.id.toString()} id={tile.title} data-grid={layout} >\n                <Module width={parseInt(layout.w)*colWidth} \n                    height={parseInt(layout.h)*rowHeight}\n                    config={tile.dataSources}\n                    // configCallback={fn => createControls = fn}\n                />\n                <ChartControls title={\"Module settings\"} group={\"General\"}>\n                    <div name={\"General\"}>\n                        <button onClick={ () => {this.removeTile(tile.id) } } >\n                                Remove Module\n                        </button>\n                    </div>\n                    {this.createDataSourceControl(tile.dataSources).map( e => (e))}\n                    {/* {children} */}\n                </ChartControls>\n            </Element>\n        )\n    }\n    \n    \n    render() {\n  \n        let {children} = this.props;\n  \n        let tiles = this.state.tiles;\n\n        let width = window.innerWidth*0.95;\n        let cols = Math.floor(width/this.state.colWidth);\n        \n        return (\n            <div>\n                <SocketConnectionStore addConnection={fn => this.addConnection = fn}\n                                removeConnection={fn => this.removeConnection = fn} />\n                <div className=\"header\">\n                    {this.state.header ? <div className=\"title\">\n                        <h1> {this.state.header} </h1>\n                    </div> : \"\"}\n                    <div className=\"ctrl\">\n                        <ChannelCtrl \n                            addSimpleChannel={this.addSimpleChannel} \n                            changePlottype={this.selectPlottype}\n                            probeConnection={this.probeConnection}\n                            tiles={tiles}\n                            advancedChannels={[]}\n                            probeMessage={this.state.probeMessage}\n                            addNewChannel={this.addNewChannel}     \n                            updateChannel={this.updateChannel} \n                            removeChannel={this.removeChannel}\n                            layout={this.state.layout}\n                            layoutLoaded={this.layoutLoaded}\n                            header={this.state.header}\n                            headerChanged={this.headerChanged}\n                            modules={modules}\n                            addModule={this.addModule}\n                        />\n                    </div>\n                 </div>\n                 {children}\n                 {this.state.moduleConfig === null ? \"\": <ModuleConfiguration moduleInformation={this.state.moduleConfig} \n                    createModule={this.createModule} \n                    closeConfig={this.closeConfig}/>}\n                 <GridLayout className=\"layout\" \n                            layout={this.state.layout} \n                            cols={cols} \n                            rowHeight={this.state.rowHeight} \n                            width={width} \n                            draggableHandle=\".element_handle\"\n                            onLayoutChange={this.onLayoutChange}\n                            >\n                    {tiles.map(this.createTile)}\n                </GridLayout>\n            </div>  \n    );\n  }\n}","import React, { Component } from 'react';\n\n\nclass Condition extends Component {\n\n    constructor(props) {\n        super(props);\n        this.optionChanged = this.optionChanged.bind(this);\n    }\n\n    optionChanged(event) {\n        this.option = event.target.value;\n    }\n\n\n    componentDidMount() {\n        if (this.props.count > 0) {\n            this.option = 1;\n        }\n    }\n\n    render() {\n\n        const {name, count} = this.props;\n\n        var options = [];\n        for (var i=1; i<= count; i++) {\n            options.push(\n                <option key={i} value={i}>\n                    {i}\n                </option>\n            )\n        }\n\n        return (\n            <li><span>\n                <span name=\"conditionName\">{name}</span>\n                <span align=\"right\">\n                    <select id={\"visSelect_\"+name} onChange={this.optionChanged}>\n                        {options}\n                    </select>\n                </span>\n                <span> \n                    <input id={\"btn\"+name} type=\"button\" value=\"Visualize\" onClick={() => this.props.onSelect(name, this.option)} /> \n                </span>\n                </span>\n            </li>\n\n        )\n    }\n}\n\n\nexport default class ConditionSelection extends Component {\n\n\n    onClick(val) {\n        console.log(\"Button clicked: \", val);\n    }\n\n\n    create_list(dict) {\n        var res = [];\n        var keys = [];\n        for (var key in dict) {\n            keys = keys.concat([key]);\n        }\n\n        keys = keys.sort((a, b) => a.localeCompare(b, 'en', { numeric: true }))\n\n        return keys.map(key => {\n            return <Condition key={key} onSelect={this.props.onSelect} name={key} count={dict[key]} />\n        });\n    }\n\n    render () {\n        var { conditions } = this.props;\n\n        return (\n            <div className=\"condition-list\">\n                <ul>\n                    {this.create_list(conditions)}\n                </ul>\n            </div>\n        )\n    }\n\n}","import React, { PureComponent } from 'react'\nimport classnames from 'classnames';\n\nimport twg from '../img/twg.svg'\nimport tw from '../img/tw.svg'\nimport tg from '../img/tg.svg'\n\nclass ModelVis extends PureComponent {\n  constructor (props, context) {\n    super(props, context)\n  }\n\n  render () {\n    let curModel = this.props.curModel;\n\n    var classesSelected = classnames(\n        \"model\",\n        \"selected\"\n    ) \n\n    var classes = classnames(\n        \"model\"\n    )\n\n    console.log(\"cur model: \", curModel)\n    return (\n      <div className='model-vis'>\n        <div className={curModel == \"TWG\" ? classesSelected : classes}>\n            <img src={twg} alt={\"TWG\"} width={200}/>\n        </div>\n        <div className={curModel == \"TW\" ? classesSelected : classes}>\n            <img src={tw} alt={\"TW\"} width={200}/>\n        </div>\n        <div className={curModel == \"TG\" ? classesSelected : classes}>\n            <img src={tg} alt={\"TG\"} width={200}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ModelVis;","import React, { Component } from 'react';\n//import PropTypes from 'prop-types';\nimport io from \"socket.io-client\";\n\n\nimport ExperimentView from \"./experimentView\";\n// import CanvasGridworldOld from \"./gridworldOld\";\nimport Element from \"./element.js\";\nimport CustomSlider from \"./slider.js\";\nimport ConditionSelection from \"./conditionSelection.js\"\nimport Text from \"./textplot.js\"\nimport ModelVis from \"./modelVisualisation.js\"\n\n\nimport {ConfigLoader, ConfigSaver}  from \"./configIO.js\"\n\n\n\nimport GridLayout from 'react-grid-layout';\n\nimport {FlexibleWidthXYPlot, XAxis, YAxis, Borders,\n    LineSeries, LineSeriesCanvas, \n    VerticalBarSeries, VerticalBarSeriesCanvas, \n    CustomSVGSeries, DiscreteColorLegend, VerticalGridLines} from \"react-vis\"; // ./3rdParty/\n\n\nexport default class Webblocks extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stepNr : 0,\n            visibleList : [],\n            requests: {sampling: false,\n                        twg: false,\n                        tw: false,\n                        tg: false,\n                        na: false,\n                        switching: false},\n            runResults: {},\n            layout: [\n                {\"w\": 18,\"h\": 8,\"x\": 0,\"y\": 0,\"i\": \"sel\"},\n                {\"w\": 6,\"h\": 18,\"x\": 0,\"y\": 4,\"i\": \"gridGroundTruth\"},\n                {\"w\": 6,\"h\": 18,\"x\": 6,\"y\": 4,\"i\": \"gridAgentsBelief\"},\n                {\"w\": 12,\"h\": 5,\"x\": 0,\"y\": 14,\"i\": \"slider\"},\n                {\"w\": 6,\"h\": 2,\"x\": 12,\"y\": 4,\"i\": \"text\"},\n                {\"w\": 6,\"h\": 3,\"x\": 12,\"y\": 5,\"i\": \"Model selection\"},\n                {\"w\": 6,\"h\": 8,\"x\": 12,\"y\": 7,\"i\": \"ratings\"},\n                {\"w\": 6,\"h\": 2,\"x\": 12,\"y\": 15,\"i\": \"Options\"},\n                {\"w\": 5,\"h\": 7,\"x\": 0,\"y\": 16,\"i\": \"Desire Beliefs\"},\n                {\"w\": 9,\"h\": 7,\"x\": 5,\"y\": 16,\"i\": \"Goal Beliefs\"},\n                {\"w\": 3,\"h\": 7,\"x\": 14,\"y\": 16,\"i\": \"World Beliefs\"}\n              ]\n        }\n\n        this.onSliderChange = this.onSliderChange.bind(this);\n        this.onConditionSelect = this.onConditionSelect.bind(this);\n        this.update_data = this.update_data.bind(this);\n        this.reduceStepNr = this.reduceStepNr.bind(this);\n        this.increaseStepNr = this.increaseStepNr.bind(this);\n        this.replay = this.replay.bind(this);\n        this.requestVisibles = this.requestVisibles.bind(this);\n\n        this.onChangeRequestMethods = this.onChangeRequestMethods.bind(this);\n\n        this.onLayoutChange = this.onLayoutChange.bind(this);\n        this.layoutLoaded = this.layoutLoaded.bind(this);\n\n        this.onWheel = this.onWheel.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.socket = io.connect(\"http://localhost:5000\", {transport:[\"websocket\"]});\n        \n        this.socket.on(\"connect\", function() {\n            console.log(\"Connected\");\n        });\n        \n        this.socket.on(\"update_data\", this.update_data);\n    }\n\n\n    update_data(data) {\n        console.log(\"received data: \", data);\n        if (data.conditions) {\n            this.setState({\n                conditions: data.conditions\n            })\n            this.conditionSrc = data.connection;\n        }\n        if (data.runData) {\n\n            let newRunResults = Object.assign({}, this.state.runResults);\n            for (var key in data.runData.methodResults) {\n                newRunResults[key] = data.runData.methodResults[key];\n            }\n\n            this.setState({\n                map: {\"map\": data.runData.map, \"targets\": data.runData.targets, \"goalPos\": data.runData.goalPos},\n                agentPositions: data.runData.agentPositions,\n                stepNr: 0,\n                runResults: newRunResults, \n                visibleList: [],\n            })\n        }\n\n        if (data.position_update) {\n            let newPos = data.position_update.pos;\n            let idx = data.position_update.idx;\n\n            let newPositions = this.state.agentPositions.slice();\n            newPositions[idx] = newPos;\n\n            this.setState({\n                agentPositions: newPositions,\n                stepNr: idx\n            })\n        }\n\n        if (data.visibles) {\n            this.setState({\n                visibleList: data.visibles\n            })\n        }\n    }\n\n    onSliderChange(value) {\n        this.setState({stepNr: value})\n        var playBtn = document.getElementById(\"togglePlay\");\n        if (playBtn) {\n            if (playBtn.innerText === \"Pause\") {\n                this.socket.emit(\"message\", this.conditionSrc,\n                            JSON.stringify({\"pause\": \"\"}));\n                playBtn.innerText = \"Replay\";\n            }\n        }\n    }\n\n    onConditionSelect(condition, runNr) {\n        this.conditionName = condition;\n        this.selectedConditionRun = runNr;\n        this.socket.emit(\"message\", this.conditionSrc, JSON.stringify({\"selection\": {\"condition\": condition, \"runNr\": runNr, \"methods\": this.state.requests}}));\n        var playBtn = document.getElementById(\"togglePlay\");\n        if (playBtn) {\n            playBtn.innerText = \"Replay\";\n        }\n\n        for (var key in this.state.requests) {\n            if (!this.state.requests[key]) {\n                this.state.runResults[key] = null;\n            }\n        }\n    }\n\n    reduceStepNr(){\n        this.setState({\n            stepNr: this.state.stepNr > 0 ? this.state.stepNr-1 : 0\n        })\n        var playBtn = document.getElementById(\"togglePlay\");\n        if (playBtn) {\n            if (playBtn.innerText === \"Pause\") {\n                this.socket.emit(\"message\", this.conditionSrc,\n                            JSON.stringify({\"pause\": \"\"}));\n                playBtn.innerText = \"Replay\";\n            }\n        }\n    }\n\n    increaseStepNr(){\n        this.setState({\n            stepNr: this.state.stepNr < this.state.agentPositions.length-1 ? this.state.stepNr+1 : this.state.agentPositions.length-1\n        })\n        var playBtn = document.getElementById(\"togglePlay\");\n        if (playBtn) {\n            if (playBtn.innerText === \"Pause\") {\n                this.socket.emit(\"message\", this.conditionSrc,\n                            JSON.stringify({\"pause\": \"\"}));\n                playBtn.innerText = \"Replay\";\n            }\n        }\n    }\n\n    replay(event) {\n        // this.socket.emit(\"replay_condition\", this.conditionName, this.selectedConditionRun);\n\n        // if (event.target)\n        if (event.target.innerText === \"Replay\") {\n            this.socket.emit(\"message\", this.conditionSrc, \n                            JSON.stringify({\"replay\": {\"condition\": this.conditionName, \n                            \"runNr\": this.selectedConditionRun, \n                            \"startStep\": this.state.stepNr,\n                            \"showVision\": true,\n                            \"speedup\": 1}}));\n            event.target.innerText = \"Pause\";\n        } else {\n            this.socket.emit(\"message\", this.conditionSrc,\n                            JSON.stringify({\"pause\": \"\"}));\n            event.target.innerText = \"Replay\";\n        }\n    }\n\n\n\n    onLayoutChange(newLayout) {\n        console.log(\"new layout: \", newLayout);\n        this.setState({\n            layout: newLayout\n        })\n    }\n\n    requestVisibles() {\n        if (this.state.visibleList.length === 0) {\n        this.socket.emit(\"message\", this.conditionSrc,\n                        JSON.stringify({\"visibles\": {\"condition\": this.conditionName, \n                        \"runNr\": this.selectedConditionRun}}) )\n        }\n    }\n\n\n\n    onWheel(e) {\n        if (e.deltaY < 0) {\n            this.increaseStepNr();\n        } else {\n            this.reduceStepNr();\n        }\n        e.preventDefault();\n    }\n\n    onChangeRequestMethods(e) {\n        let method = e.target.id.slice(0,-5);\n        let newRequests = Object.assign({}, this.state.requests);\n        newRequests[method] = !newRequests[method];\n \n        let a = {};\n        a[method] = true;        \n\n        if (newRequests[method] && !this.state.runResults[method] && this.conditionName && this.selectedConditionRun) {\n            this.socket.emit(\"message\", this.conditionSrc, JSON.stringify({\"selection\": {\"condition\": this.conditionName, \n                                                \"runNr\": this.selectedConditionRun, \"methods\": a}}));\n        }\n\n        this.setState({\n            requests: newRequests\n        })\n    }\n\n    layoutLoaded(newLayout) {\n        this.setState({\n            layout: newLayout\n        })\n    }\n\n    render() {\n\n        let {stepNr, map, agentPositions, requests, runResults} = this.state; //, samples, ratingsSamples, ratingsM1, ratingsM2, ratingsM3, ratingsM4} = this.state;\n        // if (ratings) {\n        // var ratingObjects = \n        // })\n        // } \n\n        const colors = {\"twg\": \"blue\",\n                        \"tw\": \"orange\",\n                        \"tg\": \"green\",\n                        \"na\": \"purple\",\n                        \"switching\": \"red\",\n                        \"sampling\": \"yellow\"}\n\n        const strokes = {\"twg\": \"\",\n                        \"tw\": \"\",\n                        \"tg\": \"\",\n                        \"na\": \"\",\n                        \"switching\": \"7 3\",\n                        \"sampling\": \"\"}\n\n        let lines = [];\n        for (var key in requests) {\n            if (requests[key] && runResults[key]) {\n                lines.push(<LineSeries key={key} data={runResults[key].ratingList.map((el, i) => {\n                            if (i > stepNr) {return []}\n                            return {\"x\": i, \"y\": el}})\n                    } \n                    stroke={colors[key]} strokeDasharray={strokes[key]} />)\n            }\n        }\n\n        let bars = [];\n        for (var key in requests) {\n            if (requests[key] && runResults[key]) {\n                var bardata = []\n                for (var desire in runResults[key].priorList[stepNr].desire) {\n                    bardata.push({\"x\": desire, \"y\": runResults[key].priorList[stepNr].desire[desire]})\n                }\n                bars.push(<VerticalBarSeries key={key} data={bardata} color={colors[key]} />)\n            }\n        }\n\n        let goal_bars = [];\n        for (var key in requests) {\n            if (requests[key] && runResults[key]) {\n                var bardata = []\n                for (var gb in runResults[key].priorList[stepNr].goal) {\n                    bardata.push({\"x\": gb, \"y\": runResults[key].priorList[stepNr].goal[gb]})\n                }\n                goal_bars.push(<VerticalBarSeries key={key} data={bardata} color={colors[key]} />)\n            }\n        }\n\n        let world_bars = [];\n        for (var key in requests) {\n            if (requests[key] && runResults[key]) {\n                var bardata = []\n                for (var wb in runResults[key].priorList[stepNr].world) {\n                    bardata.push({\"x\": wb, \"y\": runResults[key].priorList[stepNr].world[wb]})\n                }\n                world_bars.push(<VerticalBarSeries key={key} data={bardata} color={colors[key]} />)\n            }\n        }\n\n        let samples = runResults.sampling ? runResults.sampling.sampleList : null;\n\n\n        const colwidth = 100;\n        const rowHeight = 20;\n\n        let width = window.innerWidth*0.85;\n        let cols = Math.floor(width/colwidth);\n\n        var curModel = null;\n\n        var switchValues = [];\n        if (runResults[\"switching\"]) {\n            curModel = runResults[\"switching\"].modelList[stepNr];\n            if (requests[\"switching\"]) {\n                // switchValues = runResults[\"switching\"].reevaluationList;\n                for (var i in runResults[\"switching\"].reevaluationList) {\n                    if (runResults[\"switching\"].reevaluationList[i] <= stepNr) {\n                        switchValues.push(runResults[\"switching\"].reevaluationList[i]);\n                    }\n                }\n            }\n        }\n\n        var w,h;\n\n        var layout = {};\n\n        for (var i in this.state.layout){\n            var el = this.state.layout[i];\n            layout[el.i] = el; \n            // if (el.i==\"gridGroundTruth\") {\n                // w = parseInt(el.w);\n                // h = parseInt(el.h);\n            // }\n        }\n\n        let margin = [10,10];\n\n        return(\n            // <div className=\"webblocks-container\">\n                <GridLayout className=\"layout\" layout={this.state.layout} \n                            cols={cols} \n                            rowHeight={rowHeight} \n                            width={width} \n                            draggableHandle=\".element_handle\"\n                            onLayoutChange={this.onLayoutChange}>\n                <Element key=\"sel\" id=\"sel\">\n                    {/* All the finished conditions */}\n                    {this.state.conditions ? <ConditionSelection onSelect={this.onConditionSelect} conditions={this.state.conditions}/>: \"\"}\n                </Element>\n                <Element key=\"gridGroundTruth\" id=\"Observer's knowledge\">\n                    {map ? <ExperimentView conditionName={this.conditionName} \n                                            bgname={\"bg\"} \n                                            fgname={\"fg\"} \n                                            width={layout[\"gridGroundTruth\"] ? parseInt(layout[\"gridGroundTruth\"].w)*colwidth : 600} \n                                            height={layout[\"gridGroundTruth\"] ? (parseInt(layout[\"gridGroundTruth\"].h))*(rowHeight+margin[1]) - margin[1]: 400}\n                                            map={map} \n                                            pos={agentPositions[stepNr]}\n                                            traj={agentPositions.slice(0, stepNr+1)}\n                                            // beliefs={samples[stepNr][1]}\n                                            requestVisibles={this.requestVisibles}\n                                            visibles={this.state.visibleList[stepNr]}\n                                            /> : \"\"}\n                </Element>\n                 <Element key=\"gridAgentsBelief\" id=\"gridAgentsBelief\">\n                    {samples ? <ExperimentView conditionName={this.conditionName} \n                                            bgname={\"bg\"} \n                                            fgname={\"fg\"} \n                                            width={layout[\"gridAgentsBelief\"] ? parseInt(layout[\"gridAgentsBelief\"].w)*colwidth : 600} \n                                            height={layout[\"gridGroundTruth\"] ? (parseInt(layout[\"gridGroundTruth\"].h))*(rowHeight+margin[1]) - margin[1]: 400}\n                                            map={map} \n                                            pos={agentPositions[stepNr]}\n                                            traj={agentPositions.slice(0, stepNr+1)}\n                                            beliefs={samples[stepNr][1]}\n                                            requestVisibles={this.requestVisibles}\n                                            visibles={this.state.visibleList[stepNr]}\n                                            /> : \"\"}\n                </Element>\n                <Element key=\"slider\" id=\"Step\">\n                    {agentPositions ? <div onWheel={this.onWheel}>\n                                        <CustomSlider value={stepNr} min={0} max={agentPositions.length-1} onSliderChange={this.onSliderChange}/>\n                                        <div className={\"slider-controls\"} >\n                                            <button onClick={this.reduceStepNr} >{\"<\"}</button>\n                                            <button onClick={this.increaseStepNr} >{\">\"}</button>\n                                            <button id=\"togglePlay\" onClick={this.replay} >Replay</button>\n                                        </div>\n                                    </div>: \"\"}\n                   \n                </Element>\n                <Element key=\"text\" id=\"text\">\n                    {samples ? <Text data={samples[stepNr]}/> : \"\"}\n                </Element>\n                <Element key=\"Model selection\" id=\"Model selection\">\n                    <div className={\"flex\"}>\n                        <div>\n                            Sampling:\n                            <input id=\"samplingCheck\" type=\"checkbox\" defaultChecked={this.state.requests.sampling} checked={this.state.requests.sampling} onChange={this.onChangeRequestMethods} />\n                        </div>\n                        <div>\n                            True Goal and World Belief:\n                            <input id=\"twgCheck\" type=\"checkbox\" defaultChecked={this.state.requests.twg} checked={this.state.requests.tgw} onChange={this.onChangeRequestMethods} />\n                        </div>\n                        <div>\n                            True World Belief:\n                            <input id=\"twCheck\" type=\"checkbox\" defaultChecked={this.state.requests.tw} checked={this.state.requests.tw} onChange={this.onChangeRequestMethods} />\n                        </div>\n                        <div>\n                            True Goal Belief:\n                            <input id=\"tgCheck\" type=\"checkbox\" defaultChecked={this.state.requests.tg} checked={this.state.requests.tg} onChange={this.onChangeRequestMethods} />\n                        </div>\n                        <div>\n                            No Assumption:\n                            <input id=\"naCheck\" type=\"checkbox\" defaultChecked={this.state.requests.na} checked={this.state.requests.na} onChange={this.onChangeRequestMethods} />\n                        </div>\n                        <div>\n                            Switching:\n                            <input id=\"switchingCheck\" type=\"checkbox\" defaultChecked={this.state.requests.switching} checked={this.state.requests.switching} onChange={this.onChangeRequestMethods} />\n                        </div>\n                    </div>\n                </Element>\n                <Element key=\"ratings\" id=\"Negative Log-Likelihood\">\n                    <DiscreteColorLegend\n                    orientation=\"horizontal\"\n                    height={50}\n                    items={[\n                            // {\"title\": \"sample\", \"color\": colors[\"sampling\"]}, \n                            {\"title\": \"TrueGoalWorld\", \"color\": colors[\"twg\"]},\n                            {\"title\": \"TrueWorld\", \"color\": colors[\"tw\"]},\n                            {\"title\": \"TrueGoal\", \"color\": colors[\"tg\"]},\n                            {\"title\": \"NoAssumption\", \"color\": colors[\"na\"]},\n                            {\"title\": \"Switching\", \"color\": colors[\"switching\"]},\n                            ]}\n                    />\n                    {lines.length > 0 ? <FlexibleWidthXYPlot \n                            width={layout[\"ratings\"] ? parseInt(layout[\"ratings\"].w)*colwidth : 600} \n                            height={layout[\"ratings\"] ? parseInt(layout[\"ratings\"].h)*rowHeight: 400} \n                            dontCheckIfEmpty={true}\n                            margin={{\"left\": 60, \"right\": 30}}>\n                            {lines}\n                        <Borders style={{\n                        bottom: {fill: '#fff'},\n                        left: {fill: '#fff'},\n                        right: {fill: '#fff'},\n                        top: {fill: '#fff'}\n                    }}/>\n                        <XAxis />\n                        <YAxis />\n                        <VerticalGridLines tickValues={switchValues}/>\n                        \n                    </FlexibleWidthXYPlot> : \"\"}\n                \n                </Element>\n                <Element key=\"Options\" id=\"options\">\n                    <div className={\"flex\"}>\n                        <ConfigLoader layoutLoaded={this.layoutLoaded}/>\n                        <ConfigSaver layout={this.state.layout}/>\n                    </div>\n                </Element>\n                <Element key=\"Desire Beliefs\" id=\"Desire Beliefs\">\n                {bars.length > 0 ? <FlexibleWidthXYPlot \n                            width={layout[\"Desire Beliefs\"] ? parseInt(layout[\"Desire Beliefs\"].w)*colwidth : 600} \n                            height={layout[\"Desire Beliefs\"] ? parseInt(layout[\"Desire Beliefs\"].h)*rowHeight: 400} \n                            dontCheckIfEmpty={true}\n                            margin={{\"left\": 60, \"right\": 100}}\n                            xType={\"ordinal\"}\n                            yDomain={[0,1]}\n                            >\n                            {bars}\n                        <Borders style={{\n                        bottom: {fill: '#fff'},\n                        left: {fill: '#fff'},\n                        right: {fill: '#fff'},\n                        top: {fill: '#fff'}\n                    }}/>\n                        <XAxis />\n                        <YAxis />\n                        \n                    </FlexibleWidthXYPlot> : \"\"}\n                </Element>\n                <Element key=\"Goal Beliefs\" id=\"Goal Beliefs\">\n                {goal_bars.length > 0 ? <FlexibleWidthXYPlot \n                            width={layout[\"Goal Beliefs\"] ? parseInt(layout[\"Goal Beliefs\"].w)*colwidth : 600} \n                            height={layout[\"Goal Beliefs\"] ? parseInt(layout[\"Goal Beliefs\"].h)*rowHeight: 400} \n                            dontCheckIfEmpty={true}\n                            margin={{\"left\": 60, \"right\": 100, \"bottom\":100}}\n                            xType={\"ordinal\"}\n                            yDomain={[0,1]}\n                            >\n                            {goal_bars}\n                        <Borders style={{\n                        bottom: {fill: '#fff'},\n                        left: {fill: '#fff'},\n                        right: {fill: '#fff'},\n                        top: {fill: '#fff'}\n                    }}/>\n                        <XAxis tickLabelAngle={-90}/>\n                        <YAxis />\n                        \n                    </FlexibleWidthXYPlot> : \"\"}\n                </Element>\n                <Element key=\"World Beliefs\" id=\"World Beliefs\">\n                {world_bars.length > 0 ? <FlexibleWidthXYPlot \n                            width={layout[\"World Beliefs\"] ? parseInt(layout[\"World Beliefs\"].w)*colwidth : 600} \n                            height={layout[\"World Beliefs\"] ? parseInt(layout[\"World Beliefs\"].h)*rowHeight: 400} \n                            dontCheckIfEmpty={true}\n                            margin={{\"left\": 60, \"right\": 100, \"bottom\":100}}\n                            xType={\"ordinal\"}\n                            yDomain={[0,1]}\n                            >\n                            {world_bars}\n                        <Borders style={{\n                        bottom: {fill: '#fff'},\n                        left: {fill: '#fff'},\n                        right: {fill: '#fff'},\n                        top: {fill: '#fff'}\n                    }}/>\n                        <XAxis tickLabelAngle={-90}/>\n                        <YAxis />\n                        \n                    </FlexibleWidthXYPlot> : \"\"}\n                </Element>\n                <Element key=\"Current model\" id=\"Currently selected model\">\n                    <ModelVis curModel={curModel}/>\n                </Element>\n\n                </GridLayout>\n            // </div>\n        )\n\n    }\n\n}","import { combineReducers } from 'redux';\n\nconst initialState = {\n    channels: {}\n};\n\nfunction baseReducer(prevState = initialState, action) {\n\n    // console.log(\"prev state \", prevState)\n    let newState = Object.assign({}, prevState);\n    switch (action.type) {\n        case \"UPDATE_CHANNEL_REPLACE\": {\n            let channels =  Object.assign({}, newState.channels);\n            let channel = channels[action.channel] ? Object.assign({}, channels[action.channel]) : {};\n            channel[action.dataKey] = action.payload;\n            channels[action.channel] = channel;\n            newState.channels = channels;\n            return newState;\n        }\n        case \"UPDATE_CHANNEL_ADD\": {\n            let channels =  Object.assign({}, newState.channels);\n\n            if (!channels[action.channel]) {\n                channels[action.channel] = {};\n            }\n            let channel = Object.assign({},channels[action.channel]);\n            if (channel[action.dataKey]) {\n                channel[action.dataKey].push(action.payload);\n            } else {\n                channel[action.dataKey] = [action.payload];\n            }\n            channels[action.channel] = channel;\n            newState.channels = channels;\n            return newState;\n        }\n        case \"ADD_MSG_FNC\": {\n            console.log(\"adding message send function\")\n            newState.sendMessage = action.payload;\n            return newState;\n        }\n        case \"CLEAN_CHANNEL\": {\n            let channels =  Object.assign({}, newState.channels);\n            let channel = Object.assign({},channels[action.channel]);\n\n            for (var i=0;i<action.dataKeys.length;i++) {\n                delete channel[action.dataKeys[i].val]\n            }\n\n            if (Object.keys(channel).length === 0) {\n                delete channels[action.channel];\n            } else {\n                channels[action.channel] = channel\n            }\n\n            newState.channels = channels;\n            return newState;\n        }\n        case \"SET_STEPNR\": {\n            newState.stepNr = action.stepNr;\n            return newState;\n        }\n        default:\n            return prevState;\n    }\n}\n\n\nexport default function createReducer(asyncReducers) {\n  return combineReducers({\n      data: baseReducer,\n    ...asyncReducers\n  });\n}","import './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Dashboard from \"./components/dashboard2\";\r\n\r\nimport Webblocks from \"./components/webblocks.js\"\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\n\r\nimport configureStore from './store'\r\n\r\n/*\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const {whyDidYouUpdate} = require('why-did-you-update')\r\n  whyDidYouUpdate(React)\r\n}\r\n*/\r\n\r\nconst initialState = {};\r\n\r\nfunction reducer(prevState = initialState, action) {\r\n  return prevState;\r\n}\r\n\r\n// const store = createStore(reducer)\r\n\r\nconst store = configureStore({})\r\nconsole.log(\"store: \", store.getState())\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Dashboard >\r\n    </Dashboard>  \r\n    {/* <Webblocks /> */}\r\n  </Provider>,\r\n  document.getElementById('dashboard')\r\n);\r\n","import { createStore } from 'redux';\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState) {\n    console.log(\"initial state: \", initialState)\n  const store = createStore(createReducer([]), initialState);\n  store.asyncReducers = {};\n  return store;\n}\n\nexport function injectAsyncReducer(store, name, asyncReducer) {\n  store.asyncReducers[name] = asyncReducer;\n  store.replaceReducer(createReducer(store.asyncReducers));\n}","module.exports = __webpack_public_path__ + \"static/media/twg.e17e20d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/tw.943be1dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/tg.8aeafa3c.svg\";"],"sourceRoot":""}